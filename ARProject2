//// X5:  collisions.  bam59cst112eve/x5
//// (Assume ball diameter of 30.)

//// GLOBALS:  pool table, 3 colored balls

String title=  "Project II";
String news=   "Click 'Reset' to Reset";
String author=  "Alex Reid";


float left, right, top, bottom;
float middle;

float redX,  redY,  redDX,  redDY;
float yelX,  yelY,  yelDX,  yelDY;
float bluX, bluY, bluDX, bluDY;

float buttonX = width/4;
float buttonY = height/4;
float buttonW = 80;
float buttonH = 65;

int score = 0;

//// SETUP:  size and table
void setup() {
  size( 600, 400 );
  left=   50;
  right=  width-50;
  top=    100;
  bottom= height-50;
  middle= left + (right-left) / 2;
  //
  reset();
 }
 void reset() {

   // Random positions.
   redX=  random( middle,right );   redY=  random( top, bottom );
   yelX=  random( middle,right );   yelY=  random( top, bottom );
   bluX=  random( middle,right );   bluY=  random( top, bottom );
  
   // Random speeds
   redDX=  random( 1-9 );   redDY=  random( 1-9 );
   yelDX=  random( 1-9 );   redDY=  random( 1-9 );
   bluDX=  random( 1-9 );   bluDY=  random( 1-9 );
   
   score=0;
 }


//// NEXT FRAME:  table, bounce off walls, collisions, show all
void draw() {
  background( 250,250,200 );
  rectMode( CORNERS );
  table( left, top, right, bottom );
  showButton();
  bounce();
  collisions();
  show();
  messages();
}

//// SCENE:  draw the table with walls
void table( float left, float top, float right, float bottom ) {
  fill( 85, 69, 29 );    // green pool table
  strokeWeight(20);
  stroke( 214, 163, 35 );      // Gold walls
  rect( left-20, top-20, right+20, bottom+20 );
  stroke(0);
  strokeWeight(1);
}

void showButton() {
  fill(173, 154, 108);
  rect(buttonX, buttonY, buttonW, buttonH, 5);
  fill(255, 215, 113);
  text ("Reset", buttonX+23, buttonY+38);
  fill(206, 153, 17);
}
//// ACTION:  bounce off walls, collisions
void bounce() {
  redX += redDX;  if ( redX<left || redX>right ) redDX *= -1;
  redY += redDY;  if ( redY<top || redY>bottom ) redDY *=  -1;
  
  yelX += yelDX;  if ( yelX<left || yelX>right ) yelDX *= -1;
  yelY += yelDY;  if ( yelY<top || yelY>bottom ) yelDY *=  -1;

  bluX += bluDX; if ( bluX<left || bluX>right ) bluDX *= -1;
  bluY += bluDY; if ( bluY<top || bluY>bottom ) bluDY *= -1;
}

void collisions() {
  float tmp;
  // Swap velocities!
  if ( dist( redX,redY, yelX,yelY ) < 30 ) {
    tmp=yelDX;  yelDX=redDX;  redDX=tmp;
    tmp=yelDY;  yelDY=redDY;  redDY=tmp;
  score = score+1;
   }
   if (dist(redX,redY, bluX, bluY) < 30 ) {
    tmp=bluDX; bluDX=redDX; redDX=tmp;
    tmp=bluDY; bluDY=redDY; redDY=tmp;
  score = score+1;
   }
   if (dist(bluX,bluY, yelX, yelY) < 30 ) {
    tmp=yelDX; yelDX=bluDX; bluDX=tmp;
    tmp=yelDY; yelDY=bluDY; bluDY=tmp;
   score = score+1;
   }
}

//// SHOW:  balls, numbers, messages
void show() {
  ellipseMode(CENTER);
  fill( 255,0,0 );    ellipse( redX,redY, 30,30 );  fill(255); text("1", redX-4, redY+3); 
  fill( 255,255,0 );  ellipse( yelX,yelY, 30,30 );  fill(0); text("2", yelX-4, yelY+3);
  fill( 0,0,255 );    ellipse( bluX,bluY, 30,30 );  fill(255); text("3", bluX-4, bluY+3);
  fill(0);
  text(score, 500, 40);
  
}
void messages() {
  fill(0);
  text( title, width/3, 20 );
  text( news, width/3, 40 );
  text( author, 10, height-10 );
}
//resets positions of balls on right side of the table.
void mousePressed() {
 if(over_reset()) reset(); 
 }

boolean over_reset() {
  return (
  (mouseX < buttonX + buttonW) &&
  (mouseX >buttonX) &&
  (mouseY < buttonY + buttonH) &&
  (mouseY > buttonY) );
  
}
